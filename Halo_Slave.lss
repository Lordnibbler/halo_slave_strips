
Halo_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000436  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00000436  000004ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  00800096  00800096  00000500  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000141  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005bf  00000000  00000000  00000681  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002a7  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005ff  00000000  00000000  00000ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  000014e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002cc  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000229  00000000  00000000  000018a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__vector_6>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	83 c1       	rjmp	.+774    	; 0x326 <__vector_15>
  20:	97 c1       	rjmp	.+814    	; 0x350 <__vector_16>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e6 e3       	ldi	r30, 0x36	; 54
  36:	f4 e0       	ldi	r31, 0x04	; 4
  38:	02 c0       	rjmp	.+4      	; 0x3e <.do_copy_data_start>

0000003a <.do_copy_data_loop>:
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0

0000003e <.do_copy_data_start>:
  3e:	a6 39       	cpi	r26, 0x96	; 150
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <.do_copy_data_loop>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a6 e9       	ldi	r26, 0x96	; 150
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a0 3c       	cpi	r26, 0xC0	; 192
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	7c d0       	rcall	.+248    	; 0x14e <main>
  56:	ed c1       	rjmp	.+986    	; 0x432 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <__vector_6>:

volatile uint16_t timer_1k ;


ISR(TIMER0_OVF_vect)
{
  5a:	1f 92       	push	r1
  5c:	0f 92       	push	r0
  5e:	0f b6       	in	r0, 0x3f	; 63
  60:	0f 92       	push	r0
  62:	11 24       	eor	r1, r1
  64:	8f 93       	push	r24
  66:	9f 93       	push	r25
    TIFR = (1<<TOV0); //Clear any interrupt flags on Timer2
  68:	82 e0       	ldi	r24, 0x02	; 2
  6a:	88 bf       	out	0x38, r24	; 56
    timer_1k = timer_1k + 1;
  6c:	80 91 be 00 	lds	r24, 0x00BE
  70:	90 91 bf 00 	lds	r25, 0x00BF
  74:	01 96       	adiw	r24, 0x01	; 1
  76:	90 93 bf 00 	sts	0x00BF, r25
  7a:	80 93 be 00 	sts	0x00BE, r24
   
}
  7e:	9f 91       	pop	r25
  80:	8f 91       	pop	r24
  82:	0f 90       	pop	r0
  84:	0f be       	out	0x3f, r0	; 63
  86:	0f 90       	pop	r0
  88:	1f 90       	pop	r1
  8a:	18 95       	reti

0000008c <LED_ChangeColor>:
                             {0xf,0x5,0}};

//======================


void LED_ChangeColor(uint8_t red,uint8_t green,uint8_t blue,uint8_t rate_ms){
  8c:	98 2f       	mov	r25, r24

        delay_ms(rate_ms);
		timeout --;
    }
        */
	if(red){
  8e:	88 23       	and	r24, r24
  90:	29 f0       	breq	.+10     	; 0x9c <LED_ChangeColor+0x10>
		TCCR1A |= (1<<COM0B1);
  92:	8f b5       	in	r24, 0x2f	; 47
  94:	80 62       	ori	r24, 0x20	; 32
  96:	8f bd       	out	0x2f, r24	; 47
		RED_PWM = red;
  98:	98 bd       	out	0x28, r25	; 40
  9a:	03 c0       	rjmp	.+6      	; 0xa2 <LED_ChangeColor+0x16>
	}else{
		TCCR1A &= ~(1<<COM0B1);
  9c:	8f b5       	in	r24, 0x2f	; 47
  9e:	8f 7d       	andi	r24, 0xDF	; 223
  a0:	8f bd       	out	0x2f, r24	; 47
	}
	if(green){
  a2:	66 23       	and	r22, r22
  a4:	29 f0       	breq	.+10     	; 0xb0 <LED_ChangeColor+0x24>
		TCCR1A |= (1<<COM0A1);
  a6:	8f b5       	in	r24, 0x2f	; 47
  a8:	80 68       	ori	r24, 0x80	; 128
  aa:	8f bd       	out	0x2f, r24	; 47
		GREEN_PWM = green;
  ac:	6a bd       	out	0x2a, r22	; 42
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <LED_ChangeColor+0x2a>
	}else{
		TCCR1A &= ~(1<<COM0A1);	
  b0:	8f b5       	in	r24, 0x2f	; 47
  b2:	8f 77       	andi	r24, 0x7F	; 127
  b4:	8f bd       	out	0x2f, r24	; 47
	}
	if(blue){
  b6:	44 23       	and	r20, r20
  b8:	29 f0       	breq	.+10     	; 0xc4 <LED_ChangeColor+0x38>
		TCCR0A |= (1<<COM0A1);
  ba:	80 b7       	in	r24, 0x30	; 48
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 bf       	out	0x30, r24	; 48
		BLUE_PWM = blue;
  c0:	46 bf       	out	0x36, r20	; 54
  c2:	08 95       	ret
	}else{
		TCCR0A &= ~(1<<COM0A1);	
  c4:	80 b7       	in	r24, 0x30	; 48
  c6:	8f 77       	andi	r24, 0x7F	; 127
  c8:	80 bf       	out	0x30, r24	; 48
  ca:	08 95       	ret

000000cc <checksum>:

    

}

uint8_t checksum(uint8_t * array,int size){
  cc:	ac 01       	movw	r20, r24
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	05 c0       	rjmp	.+10     	; 0xde <checksum+0x12>
  uint8_t i;
  uint8_t sum;
  
  sum = 0;
  for(i=0;i<size; i++){
    sum += array[i];
  d4:	e4 0f       	add	r30, r20
  d6:	f5 1f       	adc	r31, r21
  d8:	80 81       	ld	r24, Z
  da:	28 0f       	add	r18, r24
uint8_t checksum(uint8_t * array,int size){
  uint8_t i;
  uint8_t sum;
  
  sum = 0;
  for(i=0;i<size; i++){
  dc:	3f 5f       	subi	r19, 0xFF	; 255
  de:	e3 2f       	mov	r30, r19
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	e6 17       	cp	r30, r22
  e4:	f7 07       	cpc	r31, r23
  e6:	b4 f3       	brlt	.-20     	; 0xd4 <checksum+0x8>
    sum += array[i];
  }
  return sum;
}
  e8:	82 2f       	mov	r24, r18
  ea:	08 95       	ret

000000ec <ioinit>:
}

void ioinit (void)
{
	//1 = Output, 0 = Input
	RGB_DDR |= RED_LED_MASK | GREEN_LED_MASK | BLUE_LED_MASK;
  ec:	87 b3       	in	r24, 0x17	; 23
  ee:	8c 61       	ori	r24, 0x1C	; 28
  f0:	87 bb       	out	0x17, r24	; 23
    RGB_PORT = 0;
  f2:	18 ba       	out	0x18, r1	; 24
	DDRD |= VIOLET_LED_MASK;
  f4:	8d 9a       	sbi	0x11, 5	; 17
    
    VIOLET_PORT &= ~VIOLET_LED_MASK; 
  f6:	95 98       	cbi	0x12, 5	; 18

	//Look at page 48 of the datasheet for more info on this
	DEVICE_DDR &= ~DEVICE_MASK; //Make Device bits input
  f8:	81 b3       	in	r24, 0x11	; 17
  fa:	80 7f       	andi	r24, 0xF0	; 240
  fc:	81 bb       	out	0x11, r24	; 17
	DEVICE_PORT |= DEVICE_MASK; //Make device bits input
  fe:	82 b3       	in	r24, 0x12	; 18
 100:	8f 60       	ori	r24, 0x0F	; 15
 102:	82 bb       	out	0x12, r24	; 18
	MCUCR &= ~(0x80); //Enable internal pull up
 104:	85 b7       	in	r24, 0x35	; 53
 106:	8f 77       	andi	r24, 0x7F	; 127
 108:	85 bf       	out	0x35, r24	; 53

	CLKPR = 0x80;
 10a:	80 e8       	ldi	r24, 0x80	; 128
 10c:	86 bd       	out	0x26, r24	; 38
    CLKPR = 2;
 10e:	92 e0       	ldi	r25, 0x02	; 2
 110:	96 bd       	out	0x26, r25	; 38
    //Init Timer0 for delay_us
    TCCR0A |= (1<<COM0A1) /*|(1<<COM0B1)*/ |(1<<WGM01) |(1<<WGM00);
 112:	80 b7       	in	r24, 0x30	; 48
 114:	83 68       	ori	r24, 0x83	; 131
 116:	80 bf       	out	0x30, r24	; 48
    TCCR0B = (1<<CS01);//(1<<CS02)|(1<<CS00); //Set Prescaler to No Prescaling (assume we are running at internal 1MHz). CS00=1 
 118:	93 bf       	out	0x33, r25	; 51
    TIMSK = (1<<TOIE0); //enable Timer Overflow interrupt
 11a:	99 bf       	out	0x39, r25	; 57
    
    TCCR1A |= (1<<COM0A1) |(1<<COM0B1) |(1<<WGM00);
 11c:	8f b5       	in	r24, 0x2f	; 47
 11e:	81 6a       	ori	r24, 0xA1	; 161
 120:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= (1<<WGM12)| (1<<CS01);
 122:	8e b5       	in	r24, 0x2e	; 46
 124:	8a 60       	ori	r24, 0x0A	; 10
 126:	8e bd       	out	0x2e, r24	; 46
    OCR0A = 0x0;//rainbow[0][0];
 128:	16 be       	out	0x36, r1	; 54
    OCR1AL = 0;//rainbow[0][1];
 12a:	1a bc       	out	0x2a, r1	; 42
    OCR1BL = 0;//rainbow[0][2];
 12c:	18 bc       	out	0x28, r1	; 40
    
    //WDTCSR = (1<<WDIE) | 0x6; //21 represents Bits 5, 2:0 â€“ WDP3:0= 0x9 = 8seconds(page47 of UM)
	sei(); //Enable interrupts
 12e:	78 94       	sei
}
 130:	08 95       	ret

00000132 <delay_ms>:

//General short delays
void delay_ms(uint16_t x)
{
	uint16_t temp;
    temp= timer_1k + x;
 132:	20 91 be 00 	lds	r18, 0x00BE
 136:	30 91 bf 00 	lds	r19, 0x00BF
 13a:	28 0f       	add	r18, r24
 13c:	39 1f       	adc	r19, r25
        
    while (timer_1k!=temp) {}
 13e:	80 91 be 00 	lds	r24, 0x00BE
 142:	90 91 bf 00 	lds	r25, 0x00BF
 146:	82 17       	cp	r24, r18
 148:	93 07       	cpc	r25, r19
 14a:	c9 f7       	brne	.-14     	; 0x13e <delay_ms+0xc>
}
 14c:	08 95       	ret

0000014e <main>:
  return sum;
}

 uint16_t color = 0;
int main (void)
{
 14e:	ef 92       	push	r14
 150:	ff 92       	push	r15
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
    uint8_t TWI_slaveAddress,count;
    uint8_t messageBuf[MESSAGEBUF_SIZE];
    uint8_t rx_red, rx_green, rx_blue, rx_violet;
	unsigned char check_sum,command,color;
	//int rgb_value = 0;
    timer_1k = 0;
 156:	10 92 bf 00 	sts	0x00BF, r1
 15a:	10 92 be 00 	sts	0x00BE, r1
   
    ioinit();
 15e:	c6 df       	rcall	.-116    	; 0xec <ioinit>
    // Own TWI slave address
    TWI_slaveAddress = 0x8;
	TWI_slaveAddress = DEVICE_PORTIN & DEVICE_MASK;
 160:	80 b3       	in	r24, 0x10	; 16
	
    USI_TWI_Slave_Initialise( TWI_slaveAddress );
 162:	8f 70       	andi	r24, 0x0F	; 15
 164:	a2 d0       	rcall	.+324    	; 0x2aa <USI_TWI_Slave_Initialise>
 166:	01 c0       	rjmp	.+2      	; 0x16a <main+0x1c>
    while(USI_TWI_Data_In_Receive_Buffer()){
		USI_TWI_Receive_Byte();
 168:	c4 d0       	rcall	.+392    	; 0x2f2 <USI_TWI_Receive_Byte>
    // Own TWI slave address
    TWI_slaveAddress = 0x8;
	TWI_slaveAddress = DEVICE_PORTIN & DEVICE_MASK;
	
    USI_TWI_Slave_Initialise( TWI_slaveAddress );
    while(USI_TWI_Data_In_Receive_Buffer()){
 16a:	d4 d0       	rcall	.+424    	; 0x314 <USI_TWI_Data_In_Receive_Buffer>
 16c:	88 23       	and	r24, r24
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0x1a>
		USI_TWI_Receive_Byte();
	}
	LED_ChangeColor((0xff),(0xff),(0xff),50);
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	6f ef       	ldi	r22, 0xFF	; 255
 174:	4f ef       	ldi	r20, 0xFF	; 255
 176:	22 e3       	ldi	r18, 0x32	; 50
 178:	89 df       	rcall	.-238    	; 0x8c <LED_ChangeColor>

//General short delays
void delay_ms(uint16_t x)
{
	uint16_t temp;
    temp= timer_1k + x;
 17a:	20 91 be 00 	lds	r18, 0x00BE
 17e:	30 91 bf 00 	lds	r19, 0x00BF
 182:	28 51       	subi	r18, 0x18	; 24
 184:	3c 4f       	sbci	r19, 0xFC	; 252
        
    while (timer_1k!=temp) {}
 186:	80 91 be 00 	lds	r24, 0x00BE
 18a:	90 91 bf 00 	lds	r25, 0x00BF
 18e:	82 17       	cp	r24, r18
 190:	93 07       	cpc	r25, r19
 192:	c9 f7       	brne	.-14     	; 0x186 <main+0x38>
    while(USI_TWI_Data_In_Receive_Buffer()){
		USI_TWI_Receive_Byte();
	}
	LED_ChangeColor((0xff),(0xff),(0xff),50);
	delay_ms(1000);
	LED_ChangeColor((0xff),(0x00),(0xff),50);
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	4f ef       	ldi	r20, 0xFF	; 255
 19a:	22 e3       	ldi	r18, 0x32	; 50
 19c:	77 df       	rcall	.-274    	; 0x8c <LED_ChangeColor>
	VIOLET_PORT |= VIOLET_LED_MASK;
 19e:	95 9a       	sbi	0x12, 5	; 18
	RGB_DDR &= ~(RED_LED_MASK | GREEN_LED_MASK | BLUE_LED_MASK);
 1a0:	87 b3       	in	r24, 0x17	; 23
 1a2:	83 7e       	andi	r24, 0xE3	; 227
 1a4:	87 bb       	out	0x17, r24	; 23
	// delay_ms(250);
	RGB_DDR |= RED_LED_MASK | GREEN_LED_MASK | BLUE_LED_MASK;
 1a6:	87 b3       	in	r24, 0x17	; 23
 1a8:	8c 61       	ori	r24, 0x1C	; 28
 1aa:	87 bb       	out	0x17, r24	; 23

//General short delays
void delay_ms(uint16_t x)
{
	uint16_t temp;
    temp= timer_1k + x;
 1ac:	20 91 be 00 	lds	r18, 0x00BE
 1b0:	30 91 bf 00 	lds	r19, 0x00BF
 1b4:	28 51       	subi	r18, 0x18	; 24
 1b6:	3c 4f       	sbci	r19, 0xFC	; 252
        
    while (timer_1k!=temp) {}
 1b8:	80 91 be 00 	lds	r24, 0x00BE
 1bc:	90 91 bf 00 	lds	r25, 0x00BF
 1c0:	82 17       	cp	r24, r18
 1c2:	93 07       	cpc	r25, r19
 1c4:	c9 f7       	brne	.-14     	; 0x1b8 <main+0x6a>
	VIOLET_PORT |= VIOLET_LED_MASK;
	RGB_DDR &= ~(RED_LED_MASK | GREEN_LED_MASK | BLUE_LED_MASK);
	// delay_ms(250);
	RGB_DDR |= RED_LED_MASK | GREEN_LED_MASK | BLUE_LED_MASK;
	delay_ms(1000);
	VIOLET_PORT &= ~VIOLET_LED_MASK;
 1c6:	95 98       	cbi	0x12, 5	; 18
	LED_ChangeColor((0xff),(0x00),(0x00),50);
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	22 e3       	ldi	r18, 0x32	; 50
 1d0:	5d df       	rcall	.-326    	; 0x8c <LED_ChangeColor>
	
	color = 0;
	LED_ChangeColor(255,00,00,50);
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	22 e3       	ldi	r18, 0x32	; 50
 1da:	58 df       	rcall	.-336    	; 0x8c <LED_ChangeColor>

//General short delays
void delay_ms(uint16_t x)
{
	uint16_t temp;
    temp= timer_1k + x;
 1dc:	20 91 be 00 	lds	r18, 0x00BE
 1e0:	30 91 bf 00 	lds	r19, 0x00BF
 1e4:	28 51       	subi	r18, 0x18	; 24
 1e6:	3c 4f       	sbci	r19, 0xFC	; 252
        
    while (timer_1k!=temp) {}
 1e8:	80 91 be 00 	lds	r24, 0x00BE
 1ec:	90 91 bf 00 	lds	r25, 0x00BF
 1f0:	82 17       	cp	r24, r18
 1f2:	93 07       	cpc	r25, r19
 1f4:	c9 f7       	brne	.-14     	; 0x1e8 <main+0x9a>
	LED_ChangeColor((0xff),(0x00),(0x00),50);
	
	color = 0;
	LED_ChangeColor(255,00,00,50);
	delay_ms(1000);
	LED_ChangeColor(0,255,00,50);
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	6f ef       	ldi	r22, 0xFF	; 255
 1fa:	40 e0       	ldi	r20, 0x00	; 0
 1fc:	22 e3       	ldi	r18, 0x32	; 50
 1fe:	46 df       	rcall	.-372    	; 0x8c <LED_ChangeColor>

//General short delays
void delay_ms(uint16_t x)
{
	uint16_t temp;
    temp= timer_1k + x;
 200:	20 91 be 00 	lds	r18, 0x00BE
 204:	30 91 bf 00 	lds	r19, 0x00BF
 208:	28 51       	subi	r18, 0x18	; 24
 20a:	3c 4f       	sbci	r19, 0xFC	; 252
        
    while (timer_1k!=temp) {}
 20c:	80 91 be 00 	lds	r24, 0x00BE
 210:	90 91 bf 00 	lds	r25, 0x00BF
 214:	82 17       	cp	r24, r18
 216:	93 07       	cpc	r25, r19
 218:	c9 f7       	brne	.-14     	; 0x20c <main+0xbe>
	color = 0;
	LED_ChangeColor(255,00,00,50);
	delay_ms(1000);
	LED_ChangeColor(0,255,00,50);
	delay_ms(1000);
	LED_ChangeColor(0,00,255,50);
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	4f ef       	ldi	r20, 0xFF	; 255
 220:	22 e3       	ldi	r18, 0x32	; 50
 222:	34 df       	rcall	.-408    	; 0x8c <LED_ChangeColor>

//General short delays
void delay_ms(uint16_t x)
{
	uint16_t temp;
    temp= timer_1k + x;
 224:	20 91 be 00 	lds	r18, 0x00BE
 228:	30 91 bf 00 	lds	r19, 0x00BF
 22c:	28 51       	subi	r18, 0x18	; 24
 22e:	3c 4f       	sbci	r19, 0xFC	; 252
        
    while (timer_1k!=temp) {}
 230:	80 91 be 00 	lds	r24, 0x00BE
 234:	90 91 bf 00 	lds	r25, 0x00BF
 238:	82 17       	cp	r24, r18
 23a:	93 07       	cpc	r25, r19
 23c:	c9 f7       	brne	.-14     	; 0x230 <main+0xe2>
	delay_ms(1000);
	LED_ChangeColor(0,255,00,50);
	delay_ms(1000);
	LED_ChangeColor(0,00,255,50);
	delay_ms(1000);
	LED_ChangeColor(0,00,0,50);
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	22 e3       	ldi	r18, 0x32	; 50
 246:	22 df       	rcall	.-444    	; 0x8c <LED_ChangeColor>
    while(1)
	{
		
        
        //while(count < 4){
		command = USI_TWI_Receive_Byte();
 248:	54 d0       	rcall	.+168    	; 0x2f2 <USI_TWI_Receive_Byte>
            if (command == 0xaf )
 24a:	8f 3a       	cpi	r24, 0xAF	; 175
 24c:	b9 f4       	brne	.+46     	; 0x27c <main+0x12e>
            {
				messageBuf[4] =0;
				messageBuf[0] = 0xaf;
                messageBuf[1] = USI_TWI_Receive_Byte();
 24e:	51 d0       	rcall	.+162    	; 0x2f2 <USI_TWI_Receive_Byte>
 250:	e8 2e       	mov	r14, r24
				messageBuf[2] = USI_TWI_Receive_Byte();
 252:	4f d0       	rcall	.+158    	; 0x2f2 <USI_TWI_Receive_Byte>
 254:	f8 2e       	mov	r15, r24
				messageBuf[3] = USI_TWI_Receive_Byte();
 256:	4d d0       	rcall	.+154    	; 0x2f2 <USI_TWI_Receive_Byte>
 258:	08 2f       	mov	r16, r24
				messageBuf[4] = USI_TWI_Receive_Byte();
 25a:	4b d0       	rcall	.+150    	; 0x2f2 <USI_TWI_Receive_Byte>
 25c:	18 2f       	mov	r17, r24
				messageBuf[5] = USI_TWI_Receive_Byte();
            	while(USI_TWI_Data_In_Receive_Buffer()){
             						USI_TWI_Receive_Byte();
 25e:	49 d0       	rcall	.+146    	; 0x2f2 <USI_TWI_Receive_Byte>
                messageBuf[1] = USI_TWI_Receive_Byte();
				messageBuf[2] = USI_TWI_Receive_Byte();
				messageBuf[3] = USI_TWI_Receive_Byte();
				messageBuf[4] = USI_TWI_Receive_Byte();
				messageBuf[5] = USI_TWI_Receive_Byte();
            	while(USI_TWI_Data_In_Receive_Buffer()){
 260:	59 d0       	rcall	.+178    	; 0x314 <USI_TWI_Data_In_Receive_Buffer>
 262:	88 23       	and	r24, r24
 264:	e1 f7       	brne	.-8      	; 0x25e <main+0x110>
		        rx_violet = messageBuf[4];
				//check_sum = messageBuf[5];
				//check_sum = checksum(messageBuf,5);
				//USI_TWI_Transmit_Byte(check_sum);
		       // if(messageBuf[5] == check_sum){
		        	LED_ChangeColor(rx_blue,rx_red,rx_green,0);
 266:	80 2f       	mov	r24, r16
 268:	6e 2d       	mov	r22, r14
 26a:	4f 2d       	mov	r20, r15
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	0e df       	rcall	.-484    	; 0x8c <LED_ChangeColor>
					if(rx_violet){
 270:	11 23       	and	r17, r17
 272:	11 f0       	breq	.+4      	; 0x278 <main+0x12a>
						VIOLET_PORT |= VIOLET_LED_MASK;
 274:	95 9a       	sbi	0x12, 5	; 18
 276:	e8 cf       	rjmp	.-48     	; 0x248 <main+0xfa>
					}else {
						VIOLET_PORT &= ~VIOLET_LED_MASK;
 278:	95 98       	cbi	0x12, 5	; 18
 27a:	e6 cf       	rjmp	.-52     	; 0x248 <main+0xfa>
					// 				delay_ms(250);
					// 				LED_ChangeColor((0x0),(0x0),(0x0),50);
					// 				delay_ms(250);
					// 
					// 			}   
            }else if(command == 0xae){
 27c:	8e 3a       	cpi	r24, 0xAE	; 174
 27e:	21 f7       	brne	.-56     	; 0x248 <main+0xfa>
 280:	01 c0       	rjmp	.+2      	; 0x284 <main+0x136>
				while(USI_TWI_Data_In_Receive_Buffer()){
													USI_TWI_Receive_Byte();
 282:	37 d0       	rcall	.+110    	; 0x2f2 <USI_TWI_Receive_Byte>
					// 				LED_ChangeColor((0x0),(0x0),(0x0),50);
					// 				delay_ms(250);
					// 
					// 			}   
            }else if(command == 0xae){
				while(USI_TWI_Data_In_Receive_Buffer()){
 284:	47 d0       	rcall	.+142    	; 0x314 <USI_TWI_Data_In_Receive_Buffer>
 286:	88 23       	and	r24, r24
 288:	e1 f7       	brne	.-8      	; 0x282 <main+0x134>
													USI_TWI_Receive_Byte();
												}
				USI_TWI_Transmit_Byte(rx_red);
 28a:	8e 2d       	mov	r24, r14
 28c:	21 d0       	rcall	.+66     	; 0x2d0 <USI_TWI_Transmit_Byte>
				USI_TWI_Transmit_Byte(rx_green);
 28e:	8f 2d       	mov	r24, r15
 290:	1f d0       	rcall	.+62     	; 0x2d0 <USI_TWI_Transmit_Byte>
				USI_TWI_Transmit_Byte(rx_blue);
 292:	80 2f       	mov	r24, r16
 294:	1d d0       	rcall	.+58     	; 0x2d0 <USI_TWI_Transmit_Byte>
 296:	d8 cf       	rjmp	.-80     	; 0x248 <main+0xfa>

00000298 <Flush_TWI_Buffers>:

/*! \brief Flushes the TWI buffers
 */
void Flush_TWI_Buffers(void)
{
    TWI_RxTail = 0;
 298:	10 92 ab 00 	sts	0x00AB, r1
    TWI_RxHead = 0;
 29c:	10 92 aa 00 	sts	0x00AA, r1
    TWI_TxTail = 0;
 2a0:	10 92 bd 00 	sts	0x00BD, r1
    TWI_TxHead = 0;
 2a4:	10 92 bc 00 	sts	0x00BC, r1
}
 2a8:	08 95       	ret

000002aa <USI_TWI_Slave_Initialise>:

/*! \brief Flushes the TWI buffers
 */
void Flush_TWI_Buffers(void)
{
    TWI_RxTail = 0;
 2aa:	10 92 ab 00 	sts	0x00AB, r1
    TWI_RxHead = 0;
 2ae:	10 92 aa 00 	sts	0x00AA, r1
    TWI_TxTail = 0;
 2b2:	10 92 bd 00 	sts	0x00BD, r1
    TWI_TxHead = 0;
 2b6:	10 92 bc 00 	sts	0x00BC, r1
 */
void USI_TWI_Slave_Initialise( unsigned char TWI_ownAddress )
{
  Flush_TWI_Buffers();

  TWI_slaveAddress = TWI_ownAddress;
 2ba:	80 93 98 00 	sts	0x0098, r24

  PORT_USI |=  (1<<PORT_USI_SCL);                                 // Set SCL high
 2be:	c7 9a       	sbi	0x18, 7	; 24
  PORT_USI |=  (1<<PORT_USI_SDA);                                 // Set SDA high
 2c0:	c5 9a       	sbi	0x18, 5	; 24
  DDR_USI  |=  (1<<PORT_USI_SCL);                                 // Set SCL as output
 2c2:	bf 9a       	sbi	0x17, 7	; 23
  DDR_USI  &= ~(1<<PORT_USI_SDA);                                 // Set SDA as input
 2c4:	bd 98       	cbi	0x17, 5	; 23
  USICR    =  (1<<USISIE)|(0<<USIOIE)|                            // Enable Start Condition Interrupt. Disable Overflow Interrupt.
 2c6:	88 ea       	ldi	r24, 0xA8	; 168
 2c8:	8d b9       	out	0x0d, r24	; 13
              (1<<USIWM1)|(0<<USIWM0)|                            // Set USI in Two-wire mode. No USI Counter overflow prior
                                                                  // to first Start Condition (potentail failure)
              (1<<USICS1)|(0<<USICS0)|(0<<USICLK)|                // Shift Register Clock Source = External, positive edge
              (0<<USITC);
  USISR    = 0xF0;                                                // Clear all flags and reset overflow counter
 2ca:	80 ef       	ldi	r24, 0xF0	; 240
 2cc:	8e b9       	out	0x0e, r24	; 14
}
 2ce:	08 95       	ret

000002d0 <USI_TWI_Transmit_Byte>:


/*! \brief Puts data in the transmission buffer, Waits if buffer is full.
*/
void USI_TWI_Transmit_Byte( unsigned char data )
{
 2d0:	28 2f       	mov	r18, r24
    unsigned char tmphead;

    tmphead = ( TWI_TxHead + 1 ) & TWI_TX_BUFFER_MASK;         // Calculate buffer index.
 2d2:	90 91 bc 00 	lds	r25, 0x00BC
 2d6:	9f 5f       	subi	r25, 0xFF	; 255
 2d8:	9f 70       	andi	r25, 0x0F	; 15
    while ( tmphead == TWI_TxTail );                           // Wait for free space in buffer.
 2da:	80 91 bd 00 	lds	r24, 0x00BD
 2de:	98 17       	cp	r25, r24
 2e0:	e1 f3       	breq	.-8      	; 0x2da <USI_TWI_Transmit_Byte+0xa>
    TWI_TxBuf[tmphead] = data;                                 // Store data in buffer.
 2e2:	e9 2f       	mov	r30, r25
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	e4 55       	subi	r30, 0x54	; 84
 2e8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ea:	20 83       	st	Z, r18
    TWI_TxHead = tmphead;                                      // Store new index.
 2ec:	90 93 bc 00 	sts	0x00BC, r25
}
 2f0:	08 95       	ret

000002f2 <USI_TWI_Receive_Byte>:
 */
unsigned char USI_TWI_Receive_Byte( void )
{
    unsigned char tmptail;
    unsigned char tmpRxTail;                                  // Temporary variable to store volatile
    tmpRxTail = TWI_RxTail;                                   // Not necessary, but prevents warnings
 2f2:	90 91 ab 00 	lds	r25, 0x00AB
    while ( TWI_RxHead == tmpRxTail );
 2f6:	80 91 aa 00 	lds	r24, 0x00AA
 2fa:	89 17       	cp	r24, r25
 2fc:	e1 f3       	breq	.-8      	; 0x2f6 <USI_TWI_Receive_Byte+0x4>
    tmptail = ( TWI_RxTail + 1 ) & TWI_RX_BUFFER_MASK;        // Calculate buffer index
 2fe:	e0 91 ab 00 	lds	r30, 0x00AB
 302:	ef 5f       	subi	r30, 0xFF	; 255
 304:	ef 70       	andi	r30, 0x0F	; 15
    TWI_RxTail = tmptail;                                     // Store new index
 306:	e0 93 ab 00 	sts	0x00AB, r30
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	e6 56       	subi	r30, 0x66	; 102
 30e:	ff 4f       	sbci	r31, 0xFF	; 255
    return TWI_RxBuf[tmptail];                                // Return data from the buffer.
}
 310:	80 81       	ld	r24, Z
 312:	08 95       	ret

00000314 <USI_TWI_Data_In_Receive_Buffer>:
/*! \brief Check if there is data in the receive buffer.
 */
unsigned char USI_TWI_Data_In_Receive_Buffer( void )
{
    unsigned char tmpRxTail;                            // Temporary variable to store volatile
    tmpRxTail = TWI_RxTail;                             // Not necessary, but prevents warnings
 314:	90 91 ab 00 	lds	r25, 0x00AB
    return ( TWI_RxHead != tmpRxTail );                 // Return 0 (FALSE) if the receive buffer is empty.
 318:	80 91 aa 00 	lds	r24, 0x00AA
 31c:	20 e0       	ldi	r18, 0x00	; 0
 31e:	89 13       	cpse	r24, r25
 320:	21 e0       	ldi	r18, 0x01	; 1
}
 322:	82 2f       	mov	r24, r18
 324:	08 95       	ret

00000326 <__vector_15>:
 * for reception of the "TWI Address" packet.
 */


ISR(USI_START_VECTOR)
{
 326:	1f 92       	push	r1
 328:	0f 92       	push	r0
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	0f 92       	push	r0
 32e:	11 24       	eor	r1, r1
 330:	8f 93       	push	r24
    unsigned char tmpUSISR;                                         // Temporary variable to store volatile
    tmpUSISR = USISR;                                               // Not necessary, but prevents warnings
 332:	8e b1       	in	r24, 0x0e	; 14
// Set default starting conditions for new TWI package
    USI_TWI_Overflow_State = USI_SLAVE_CHECK_ADDRESS;
 334:	10 92 99 00 	sts	0x0099, r1
    DDR_USI  &= ~(1<<PORT_USI_SDA);                                 // Set SDA as input
 338:	bd 98       	cbi	0x17, 5	; 23
    while ( (PIN_USI & (1<<PORT_USI_SCL)) & !(tmpUSISR & (1<<USIPF)) );   // Wait for SCL to go low to ensure the "Start Condition" has completed.
 33a:	86 b3       	in	r24, 0x16	; 22
                                                                       // If a Stop condition arises then leave the interrupt to prevent waiting forever.
    USICR   =   (1<<USISIE)|(1<<USIOIE)|                            // Enable Overflow and Start Condition Interrupt. (Keep StartCondInt to detect RESTART)
 33c:	88 ef       	ldi	r24, 0xF8	; 248
 33e:	8d b9       	out	0x0d, r24	; 13
                (1<<USIWM1)|(1<<USIWM0)|                            // Set USI in Two-wire mode.
                (1<<USICS1)|(0<<USICS0)|(0<<USICLK)|                // Shift Register Clock Source = External, positive edge
                (0<<USITC);
    USISR  =    (1<<USI_START_COND_INT)|(1<<USIOIF)|(1<<USIPF)|(1<<USIDC)|      // Clear flags
 340:	80 ef       	ldi	r24, 0xF0	; 240
 342:	8e b9       	out	0x0e, r24	; 14
                (0x0<<USICNT0);                                     // Set USI to sample 8 bits i.e. count 16 external pin toggles.
//	RGB_DDR |= RED_LED_MASK;
}
 344:	8f 91       	pop	r24
 346:	0f 90       	pop	r0
 348:	0f be       	out	0x3f, r0	; 63
 34a:	0f 90       	pop	r0
 34c:	1f 90       	pop	r1
 34e:	18 95       	reti

00000350 <__vector_16>:
 * Handels all the comunication. Is disabled only when waiting
 * for new Start Condition.
 */

ISR(USI_OVERFLOW_VECTOR)
{
 350:	1f 92       	push	r1
 352:	0f 92       	push	r0
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	0f 92       	push	r0
 358:	11 24       	eor	r1, r1
 35a:	8f 93       	push	r24
 35c:	9f 93       	push	r25
 35e:	ef 93       	push	r30
 360:	ff 93       	push	r31
  unsigned char tmpTxTail;     // Temporary variables to store volatiles
  unsigned char tmpUSIDR;


  switch (USI_TWI_Overflow_State)
 362:	80 91 99 00 	lds	r24, 0x0099
 366:	82 30       	cpi	r24, 0x02	; 2
 368:	d9 f1       	breq	.+118    	; 0x3e0 <__vector_16+0x90>
 36a:	83 30       	cpi	r24, 0x03	; 3
 36c:	30 f4       	brcc	.+12     	; 0x37a <__vector_16+0x2a>
 36e:	88 23       	and	r24, r24
 370:	61 f0       	breq	.+24     	; 0x38a <__vector_16+0x3a>
 372:	81 30       	cpi	r24, 0x01	; 1
 374:	09 f0       	breq	.+2      	; 0x378 <__vector_16+0x28>
 376:	54 c0       	rjmp	.+168    	; 0x420 <__vector_16+0xd0>
 378:	18 c0       	rjmp	.+48     	; 0x3aa <__vector_16+0x5a>
 37a:	84 30       	cpi	r24, 0x04	; 4
 37c:	b9 f1       	breq	.+110    	; 0x3ec <__vector_16+0x9c>
 37e:	84 30       	cpi	r24, 0x04	; 4
 380:	88 f0       	brcs	.+34     	; 0x3a4 <__vector_16+0x54>
 382:	85 30       	cpi	r24, 0x05	; 5
 384:	09 f0       	breq	.+2      	; 0x388 <__vector_16+0x38>
 386:	4c c0       	rjmp	.+152    	; 0x420 <__vector_16+0xd0>
 388:	37 c0       	rjmp	.+110    	; 0x3f8 <__vector_16+0xa8>
  {
    // ---------- Address mode ----------
    // Check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK, else reset USI.
    case USI_SLAVE_CHECK_ADDRESS:
      if ((USIDR == 0) || (( USIDR>>1 ) == TWI_slaveAddress))
 38a:	8f b1       	in	r24, 0x0f	; 15
 38c:	88 23       	and	r24, r24
 38e:	31 f0       	breq	.+12     	; 0x39c <__vector_16+0x4c>
 390:	8f b1       	in	r24, 0x0f	; 15
 392:	86 95       	lsr	r24
 394:	90 91 98 00 	lds	r25, 0x0098
 398:	89 17       	cp	r24, r25
 39a:	f9 f4       	brne	.+62     	; 0x3da <__vector_16+0x8a>
      {
        if ( USIDR & 0x01 )
 39c:	78 9b       	sbis	0x0f, 0	; 15
 39e:	39 c0       	rjmp	.+114    	; 0x412 <__vector_16+0xc2>
          USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	38 c0       	rjmp	.+112    	; 0x414 <__vector_16+0xc4>
      break;

    // ----- Master write data mode ------
    // Check reply and goto USI_SLAVE_SEND_DATA if OK, else reset USI.
    case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
      if ( USIDR ) // If NACK, the master does not want more data.
 3a4:	8f b1       	in	r24, 0x0f	; 15
 3a6:	88 23       	and	r24, r24
 3a8:	c1 f4       	brne	.+48     	; 0x3da <__vector_16+0x8a>

    // Copy data from buffer to USIDR and set USI to shift byte. Next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
    case USI_SLAVE_SEND_DATA:

      // Get data from Buffer
      tmpTxTail = TWI_TxTail;           // Not necessary, but prevents warnings
 3aa:	90 91 bd 00 	lds	r25, 0x00BD
      if ( TWI_TxHead != tmpTxTail )
 3ae:	80 91 bc 00 	lds	r24, 0x00BC
 3b2:	89 17       	cp	r24, r25
 3b4:	91 f0       	breq	.+36     	; 0x3da <__vector_16+0x8a>
      {
        TWI_TxTail = ( TWI_TxTail + 1 ) & TWI_TX_BUFFER_MASK;
 3b6:	80 91 bd 00 	lds	r24, 0x00BD
 3ba:	8f 5f       	subi	r24, 0xFF	; 255
 3bc:	8f 70       	andi	r24, 0x0F	; 15
 3be:	80 93 bd 00 	sts	0x00BD, r24
        USIDR = TWI_TxBuf[TWI_TxTail];
 3c2:	e0 91 bd 00 	lds	r30, 0x00BD
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	e4 55       	subi	r30, 0x54	; 84
 3ca:	ff 4f       	sbci	r31, 0xFF	; 255
 3cc:	80 81       	ld	r24, Z
 3ce:	8f b9       	out	0x0f, r24	; 15
      else // If the buffer is empty then:
      {
          SET_USI_TO_TWI_START_CONDITION_MODE();
          return;
      }
      USI_TWI_Overflow_State = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
 3d0:	82 e0       	ldi	r24, 0x02	; 2
 3d2:	80 93 99 00 	sts	0x0099, r24
      SET_USI_TO_SEND_DATA();
 3d6:	bd 9a       	sbi	0x17, 5	; 23
 3d8:	0d c0       	rjmp	.+26     	; 0x3f4 <__vector_16+0xa4>
        TWI_TxTail = ( TWI_TxTail + 1 ) & TWI_TX_BUFFER_MASK;
        USIDR = TWI_TxBuf[TWI_TxTail];
      }
      else // If the buffer is empty then:
      {
          SET_USI_TO_TWI_START_CONDITION_MODE();
 3da:	88 ea       	ldi	r24, 0xA8	; 168
 3dc:	8d b9       	out	0x0d, r24	; 13
 3de:	0a c0       	rjmp	.+20     	; 0x3f4 <__vector_16+0xa4>
      SET_USI_TO_SEND_DATA();
      break;

    // Set USI to sample reply from master. Next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
    case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
      USI_TWI_Overflow_State = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
 3e0:	83 e0       	ldi	r24, 0x03	; 3
 3e2:	80 93 99 00 	sts	0x0099, r24
      SET_USI_TO_READ_ACK();
 3e6:	bd 98       	cbi	0x17, 5	; 23
 3e8:	1f b8       	out	0x0f, r1	; 15
 3ea:	18 c0       	rjmp	.+48     	; 0x41c <__vector_16+0xcc>
      break;

    // ----- Master read data mode ------
    // Set USI to sample data from master. Next USI_SLAVE_GET_DATA_AND_SEND_ACK.
    case USI_SLAVE_REQUEST_DATA:
      USI_TWI_Overflow_State = USI_SLAVE_GET_DATA_AND_SEND_ACK;
 3ec:	85 e0       	ldi	r24, 0x05	; 5
 3ee:	80 93 99 00 	sts	0x0099, r24
      SET_USI_TO_READ_DATA();
 3f2:	bd 98       	cbi	0x17, 5	; 23
 3f4:	80 e7       	ldi	r24, 0x70	; 112
 3f6:	13 c0       	rjmp	.+38     	; 0x41e <__vector_16+0xce>
      break;

    // Copy data from USIDR and send ACK. Next USI_SLAVE_REQUEST_DATA
    case USI_SLAVE_GET_DATA_AND_SEND_ACK:
      // Put data into Buffer
      tmpUSIDR = USIDR;             // Not necessary, but prevents warnings
 3f8:	9f b1       	in	r25, 0x0f	; 15
      TWI_RxHead = ( TWI_RxHead + 1 ) & TWI_RX_BUFFER_MASK;
 3fa:	80 91 aa 00 	lds	r24, 0x00AA
 3fe:	8f 5f       	subi	r24, 0xFF	; 255
 400:	8f 70       	andi	r24, 0x0F	; 15
 402:	80 93 aa 00 	sts	0x00AA, r24
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
 406:	e0 91 aa 00 	lds	r30, 0x00AA
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	e6 56       	subi	r30, 0x66	; 102
 40e:	ff 4f       	sbci	r31, 0xFF	; 255
 410:	90 83       	st	Z, r25

      USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
 412:	84 e0       	ldi	r24, 0x04	; 4
 414:	80 93 99 00 	sts	0x0099, r24
      SET_USI_TO_SEND_ACK();
 418:	1f b8       	out	0x0f, r1	; 15
 41a:	bd 9a       	sbi	0x17, 5	; 23
 41c:	8e e7       	ldi	r24, 0x7E	; 126
 41e:	8e b9       	out	0x0e, r24	; 14
      break;
  }
}
 420:	ff 91       	pop	r31
 422:	ef 91       	pop	r30
 424:	9f 91       	pop	r25
 426:	8f 91       	pop	r24
 428:	0f 90       	pop	r0
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	0f 90       	pop	r0
 42e:	1f 90       	pop	r1
 430:	18 95       	reti

00000432 <_exit>:
 432:	f8 94       	cli

00000434 <__stop_program>:
 434:	ff cf       	rjmp	.-2      	; 0x434 <__stop_program>
